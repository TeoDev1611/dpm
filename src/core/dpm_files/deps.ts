// Copyright Â© 2022 Dpm Land. All Rights Reserved.

import { BASE_DIRECTORIES, NAME_DIRECTORIES } from 'mods/dirs.ts';
import { LOGGER } from 'mods/logger.ts';
import { dracoFiles, ensureFile } from 'mods/deps.ts';
import { ReadDpmFile } from 'dpm/read.ts';
import { WriteDpmFileJson } from 'dpm/init.ts';

export const depsDefaultData = `
// Generated by DPM -> github.com/dpmland
//
// This file is automaticall generated by dpm if you want modify manual can be write!
//
// DEPS SYNTAX:
// export * as MODULENAME from 'HOST_URL/MODULE_NAME@VERSION_AUTOMATICALL/FILE_MOD'
//
// DEPENDENCY LIST ...
`;

export async function writeDepsTsFile() {
  if (dracoFiles.exists(BASE_DIRECTORIES.DPM_FILE) == false) {
    await WriteDpmFileJson({});
    LOGGER.info('Writing the default dpm file because not exists!');
  }
  let file;
  if (dracoFiles.exists(BASE_DIRECTORIES.DPM_FILE)) {
    file = await ReadDpmFile();
  }
  if (!('config' in file)) {
    LOGGER.error(
      'Config key not found check the correct syntax! More information on << dpm doc init.syntax >> or run << dpm init --dpm >> for restart the dpm file',
    );
    Deno.exit(2);
  }
  if (!('depsFile' in file.config)) {
    LOGGER.error(
      'DepsFile key not found check the correct syntax! More information on << dpm doc init.syntax >> or run << dpm init --dpm >> for restart the dpm file',
    );
    Deno.exit(2);
  }
  if (file.config.depsFile.enable == true) {
    if (file.config.depsFile.directory == true) {
      await ensureFile(BASE_DIRECTORIES.DEPS_DIR);
      try {
        await Deno.writeTextFile(BASE_DIRECTORIES.DEPS_DIR, depsDefaultData);
      } catch (e) {
        LOGGER.error(e.message);
        Deno.exit(2);
      }
      LOGGER.info(
        `Writed succesfully ${NAME_DIRECTORIES.DEPS_DIR} file and directory!`,
      );
    }
    try {
      await Deno.writeTextFile(
        BASE_DIRECTORIES.DEPS_FILE_ONLY,
        depsDefaultData,
      );
    } catch (e) {
      LOGGER.error(e.message);
      Deno.exit(2);
    }
    LOGGER.info(`Writed succesfully ${NAME_DIRECTORIES.DEPS_FILE_ONLY} file!`);
    if (file.config.depsFile.directory == true) {
      console.log(`
Recomendation:
Can you import like this:
import { moduleName } from "./${NAME_DIRECTORIES.IMPORT_MAPS_DIR}"
`);
    } else {
      console.log(`
Recomendation:
Can you import like this:
import { moduleName } from "./${NAME_DIRECTORIES.IMPORT_MAPS}"
`);
    }
  } else {
    LOGGER.warn(
      `Disabled this feature in the ${NAME_DIRECTORIES.DPM_FILE} more information with << dpm doc init.syntax >>`,
    );
  }
}

export async function readDepsFile() {
  try {
    if (dracoFiles.exists(BASE_DIRECTORIES.DPM_FILE) == false) {
      await WriteDpmFileJson({});
      LOGGER.info('Writing the default dpm file because not exists!');
    }
    let file;
    if (dracoFiles.exists(BASE_DIRECTORIES.DPM_FILE)) {
      file = await ReadDpmFile();
    }
    if (!('config' in file)) {
      LOGGER.error(
        'Config key not found check the correct syntax! More information on << dpm doc init.syntax >> or run << dpm init --dpm >> for restart the dpm file',
      );
      Deno.exit(2);
    }
    if (!('depsFile' in file.config)) {
      LOGGER.error(
        'DepsFile key not found check the correct syntax! More information on << dpm doc init.syntax >> or run << dpm init --dpm >> for restart the dpm file',
      );
      Deno.exit(2);
    }
    if (file.config.depsFile.enable == true) {
      if (file.config.depsFile.directory == true) {
        if (dracoFiles.exists(BASE_DIRECTORIES.DEPS_DIR)) {
          const data = await Deno.readTextFile(BASE_DIRECTORIES.DEPS_DIR);
          const result = data.split('\n');
          result.splice(0, 9);
          return result.join('\n');
        } else {
          LOGGER.error(
            `Can't find the ${NAME_DIRECTORIES.DEPS_DIR} file check if is correct the syntax with << dpm doc init.syntax >> or check if exists the deps file for reinitialize with << dpm init --deps >>`,
          );
          Deno.exit(2);
        }
      }
      if (dracoFiles.exists(BASE_DIRECTORIES.DEPS_FILE_ONLY)) {
        const data = await Deno.readTextFile(BASE_DIRECTORIES.DEPS_DIR);
        const result = data.split('\n');
        result.splice(0, 9);
        return result.join('\n');
      } else {
        LOGGER.error(
          `Can't find the ${NAME_DIRECTORIES.DEPS_FILE_ONLY} file check if is correct the syntax with << dpm doc init.syntax >> or check if exists the deps file for reinitialize with << dpm init --deps >>`,
        );
        Deno.exit(2);
      }
    } else {
      LOGGER.warn(
        `Disabled this feature in the ${NAME_DIRECTORIES.DPM_FILE} more information with << dpm doc init.syntax >>`,
      );
    }
  } catch (e) {
    LOGGER.error(e.message);
    Deno.exit(2);
  }
}
